var app = angular.module('odaniaPortalProtected', ['ngRoute', 'ngResource', 'ui.bootstrap', 'textAngular']);

app.config(['$routeProvider', '$provide', function ($routeProvider, $provide) {
	console.log('config :: init');
	var resolved = false;

	var resolve = {
		'bootstrap': ['$rootScope', 'resolveService', 'eventTypeProvider', function ($rootScope, resolveService, eventTypeProvider) {
			return resolveService.resolveBootstrap().then(function (data) {
				console.log("bootstrap-data", data);
				$rootScope.currentSite = data.site;
				$rootScope.languages = data.languages;
				$rootScope.general = data.general;

				$rootScope.timeDifference = new Date().getTime() - data.current_time;
				console.warn('asd', data.current_time, new Date().getTime(), $rootScope.timeDifference);

				if (!resolved) {
					resolved = true;
				}
				$rootScope.$broadcast(eventTypeProvider.INTERNAL_BOOTSTRAP_RESOLVED);
				console.log("bootstrap :: done");
			});
		}]
	};

	$provide.decorator('taOptions', ['taRegisterTool', '$delegate', 'ImageSelectService', function (taRegisterTool, taOptions, ImageSelectService) {
		// $delegate is the taOptions we are decorating
		// register the tool with textAngular
		taRegisterTool('colourRed', {
			iconclass: "fa fa-file-image-o",
			action: function (deferred, restoreSelection) {
				var that = this;

				ImageSelectService.selectImage().then(function (image) {
					restoreSelection();
					that.$editor().wrapSelection('InsertImage', image.src);
					$('img[src="' + image.src + '"]').attr('alt', image.alt).attr('title', image.title);

					deferred.resolve();
				}, function (err) {
					console.warn('Error image select', err);
					deferred.reject();
				});

				return false;
			}
		});
		// add the button to the default toolbar definition
		taOptions.toolbar[3].push('colourRed');
		return taOptions;
	}]);

	$routeProvider
		.when('/dashboard', {
			'controller': 'DashboardController',
			'templateUrl': config.getTemplatePath('dashboard/index'),
			'resolve': resolve
		})
		<% Odania::Protected.pages.each do |page| %>
		.when('<%= page[:path] %>', {
			'controller': '<%= page[:controller] %>',
			'templateUrl': config.getTemplatePath('<%= page[:template] %>'<%= page[:template_app].nil? ? '' : ", '#{page[:template_app]}'" %>),
			'resolve': resolve
		})
		<% end %>
		.otherwise({'redirectTo': '/dashboard'});
}]);

app.run(['$rootScope', 'BootstrapResource', '$window', function ($rootScope, BootstrapResource, $window) {
	console.log("bootstrap :: init");

	$rootScope.printErrors = function (errors) {
		return errors.join(', ');
	};

	$rootScope.changeLanguage = function (language_id) {
		console.info("Changing language", language_id);
		BootstrapResource.changeLanguage({language_id: language_id}).$promise.then(function () {
			$window.location.reload();
		});
	};

	$rootScope.addToArray = function (arr, val) {
		if (arr.indexOf(val) === -1) {
			arr.push(val);
		}
	};

	$rootScope.getTimeDifference = function (earlierDate, laterDate) {
		//  Calculate Differences
		//  -------------------------------------------------------------------  //
		var nTotalDiff = laterDate.getTime() - earlierDate.getTime();
		return format_time_difference(nTotalDiff);
	};

	$rootScope.formatTimeDifference = function (nTotalDiff) {
		var oDiff = new Object();

		oDiff.days = Math.floor(nTotalDiff / 1000 / 60 / 60 / 24);
		nTotalDiff -= oDiff.days * 1000 * 60 * 60 * 24;

		oDiff.hours = Math.floor(nTotalDiff / 1000 / 60 / 60);
		nTotalDiff -= oDiff.hours * 1000 * 60 * 60;

		oDiff.minutes = Math.floor(nTotalDiff / 1000 / 60);
		nTotalDiff -= oDiff.minutes * 1000 * 60;

		oDiff.seconds = Math.floor(nTotalDiff / 1000);
		//  -------------------------------------------------------------------  //

		//  Format Duration
		//  -------------------------------------------------------------------  //
		// Format Days
		var daytext = '';
		if (oDiff.days > 0) {
			daytext = String(oDiff.days) + ' ';
		}

		//  Format Hours
		var hourtext = '00';
		if (oDiff.hours > 0) {
			hourtext = String(oDiff.hours);
		}
		if (hourtext.length == 1) {
			hourtext = '0' + hourtext;
		}

		//  Format Minutes
		var mintext = '00';
		if (oDiff.minutes > 0) {
			mintext = String(oDiff.minutes);
		}
		if (mintext.length == 1) {
			mintext = '0' + mintext;
		}

		//  Format Seconds
		var sectext = '00';
		if (oDiff.seconds > 0) {
			sectext = String(oDiff.seconds);
		}
		if (sectext.length == 1) {
			sectext = '0' + sectext;
		}

		//  Set Duration
		var sDuration = daytext + hourtext + ':' + mintext + ':' + sectext;
		oDiff.duration = sDuration;
		//  -------------------------------------------------------------------  //

		return oDiff;
	};
}]);
