var app = angular.module('odaniaPortalProtected', ['ngRoute', 'ngResource', 'ui.bootstrap', 'textAngular']);

app.config(['$routeProvider', '$provide', function ($routeProvider, $provide) {
	console.log('config :: init');
	var resolved = false;

	var resolve = {
		'bootstrap': ['$rootScope', 'resolveService', 'eventTypeProvider', function ($rootScope, resolveService, eventTypeProvider) {
			return resolveService.resolveBootstrap().then(function (data) {
				console.log("bootstrap-data", data);
				$rootScope.currentSite = data.site;
				$rootScope.languages = data.languages;
				$rootScope.general = data.general;

				if (!resolved) {
					resolved = true;
				}
				$rootScope.$broadcast(eventTypeProvider.INTERNAL_BOOTSTRAP_RESOLVED);
				console.log("bootstrap :: done");
			});
		}]
	};

	$provide.decorator('taOptions', ['taRegisterTool', '$delegate', 'ImageSelectService', function (taRegisterTool, taOptions, ImageSelectService) {
		// $delegate is the taOptions we are decorating
		// register the tool with textAngular
		taRegisterTool('colourRed', {
			iconclass: "fa fa-file-image-o",
			action: function (deferred, restoreSelection) {
				var that = this;

				ImageSelectService.selectImage().then(function (image) {
					restoreSelection();
					that.$editor().wrapSelection('InsertImage', image.src);
					$('img[src="'+image.src+'"]').attr('alt', image.alt).attr('title', image.title);

					deferred.resolve();
				}, function (err) {
					console.warn('Error image select', err);
					deferred.reject();
				});

				return false;
			}
		});
		// add the button to the default toolbar definition
		taOptions.toolbar[3].push('colourRed');
		return taOptions;
	}]);

	$routeProvider
		.when('/dashboard', {
			'controller': 'DashboardController',
			'templateUrl': config.getTemplatePath('dashboard/index'),
			'resolve': resolve
		})
		<% Odania::Protected.pages.each do |page| %>
		.when('<%= page[:path] %>', {
			'controller': '<%= page[:controller] %>',
			'templateUrl': config.getTemplatePath('<%= page[:template] %>'),
			'resolve': resolve
		})
		<% end %>
		.otherwise({'redirectTo': '/dashboard'});
}]);

app.run(['$rootScope', 'BootstrapResource', '$window', function ($rootScope, BootstrapResource, $window) {
	console.log("bootstrap :: init");

	BootstrapResource.get();

	$rootScope.printErrors = function (errors) {
		return errors.join(', ');
	};

	$rootScope.changeLanguage = function (language_id) {
		console.info("Changing language", language_id);
		BootstrapResource.changeLanguage({language_id: language_id}).$promise.then(function () {
			$window.location.reload();
		});
	};

	$rootScope.addToArray = function (arr, val) {
		if (arr.indexOf(val) === -1) {
			arr.push(val);
		}
	};
}]);
